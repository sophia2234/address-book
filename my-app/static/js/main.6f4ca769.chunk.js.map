{"version":3,"sources":["images/Party.png","images/PartyCopy.png","images/PartyCopyCopy.png","images/PartyCopyCopyCopy.png","addresses.js","contactPreview.js","contactAddress.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","addresses","firstName","lastName","addressLineOne","addressLineTwo","city","state","zipCode","country","ContactPreview","_this$props","this","props","contact","onClickFunction","react_default","a","createElement","onClick","Component","ContactAddress","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setCurrentContact","setState","currentContact","changeCurrentContact","bind","assertThisInitialized","_this2","className","src","Party","alt","PartyTwo","contactAddress","PartyThree","PartyFour","map","address","key","contactPreview","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f4ca769.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Party.6bd1daaf.png\";","module.exports = __webpack_public_path__ + \"static/media/PartyCopy.da7927ad.png\";","module.exports = __webpack_public_path__ + \"static/media/PartyCopyCopy.da7927ad.png\";","module.exports = __webpack_public_path__ + \"static/media/PartyCopyCopyCopy.da7927ad.png\";","export const addresses = [\n\t{\n\t\tfirstName: 'Sophia',\n\t\tlastName: 'Brucker',\n\t\taddressLineOne: '1234 SW Drive',\n\t\taddressLineTwo: 'Apt #9',\n\t\tcity: 'West Des Moines',\n\t\tstate: 'IA',\n\t\tzipCode: '50345',\n\t\tcountry: 'United States'\n\t},\n\t{\n\t\tfirstName: 'Rusty',\n\t\tlastName: 'Shackleford',\n\t\taddressLineOne: '4321 65th Street',\n\t\taddressLineTwo: null,\n\t\tcity: 'Arlen',\n\t\tstate: 'TX',\n\t\tzipCode: '12345',\n\t\tcountry: 'United States'\n\t},\n\t{\n\t\tfirstName: 'Bozo',\n\t\tlastName: 'TheClown',\n\t\taddressLineOne: '4567 Funny Lane',\n\t\taddressLineTwo: 'Suite #4',\n\t\tcity: 'Topeka',\n\t\tstate: 'KS',\n\t\tzipCode: '54321',\n\t\tcountry: 'United States'\n\t},\n\t{\n\t\tfirstName: 'Bobby',\n\t\tlastName: 'Hill',\n\t\taddressLineOne: '7568 Ladybird Lane',\n\t\taddressLineTwo: 'Apt 2',\n\t\tcity: 'Arlen',\n\t\tstate: 'TX',\n\t\tzipCode: '34523',\n\t\tcountry: 'United States'\n\t},\n\t{\n\t\tfirstName: 'Steve',\n\t\tlastName: 'Bob',\n\t\taddressLineOne: '3456 Street Drive',\n\t\taddressLineTwo: null,\n\t\tcity: 'Denver',\n\t\tstate: 'CO',\n\t\tzipCode: '78906',\n\t\tcountry: 'United States'\n\t}\n];\n","import React, { Component } from 'react';\n\nclass ContactPreview extends Component {\n\trender() {\n\t\t\n\t\tconst {contact, onClickFunction} = this.props;\n\t\t\n\t\treturn (\n\t\t\t<button\n\t\t\t\tonClick={() => onClickFunction(contact)}\n\t\t\t>\n\t\t\t\t<p>{contact.firstName} {contact.lastName}</p>\n\t\t\t</button>\n\t\t)\t\n\t}\n}\n\nexport default ContactPreview;","\nimport React, {Component} from 'react';\n\nclass ContactAddress extends Component {\n    render() {\n        const {contact} = this.props;\n\n        return (\n\t\t\t<div>\n\t\t\t\t<p>{contact.firstName} {contact.lastName}</p>\n\t\t\t\t<p>{contact.addressLineOne} {contact.addressLineTwo}</p>\n\t\t\t\t<p>{contact.city}, {contact.state} {contact.zipCode}</p>\n\t\t\t\t<p>{contact.country}</p>\n\t\t\t</div>\n        );\n    }\n}\n\nexport default ContactAddress;","import React, { Component } from 'react';\n\nimport {addresses} from './addresses';\nimport ContactPreview from './contactPreview';\nimport ContactAddress from './contactAddress';\nimport Party from './images/Party.png';\nimport PartyTwo from './images/PartyCopy.png';\nimport PartyThree from './images/PartyCopyCopy.png';\nimport PartyFour from './images/PartyCopyCopyCopy.png';\n\n\nimport './index.css';\n\nclass App extends Component {\n\tsetCurrentContact = (contact) => {\n\t\tthis.setState({\n\t\t\tcurrentContact: contact\n\t\t})\n\t}\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.changeCurrentContact = this.setCurrentContact.bind(this);\n\t\t\n\t\tthis.state = {\n\t\t\tcurrentContact: null\n\t\t};\n\t}\n\t\n  \trender() {\n\t  \t//console.log(this.state.currentContact);\n\t\t\n    \treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"AddressBox\">\n\t\t\t\t\t<img src={Party} className=\"Party\" alt=\"Party\" />\n\t\t\t\t\t\t<img src={PartyTwo} className=\"PartyTwo\" alt=\"Party\" />\n\t\t\t\t\t{\t\t\t\t\t\n                        this.state.currentContact ?\n\t\t\t\t\t\t\t<ContactAddress\n\t\t\t\t\t\t\t\tcontact={this.state.currentContact}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t<p>You're Invited!</p>\n                    }\n\t\t\t\t\t<img src={PartyThree} className=\"PartyThree\" alt=\"Party\" />\n\t\t\t\t\t\t<img src={PartyFour} className=\"PartyFour\" alt=\"Party\" />\n\t\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddresses.map( (address) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\tkey={address.firstName}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ContactPreview\n\t\t\t\t\t\t\t\t\t\t\tcontact={address}\n\t\t\t\t\t\t\t\t\t\t\tonClickFunction={this.changeCurrentContact}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t{\n/*\t\t\t\t\t\tthis.state.currentContact ?\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p>{`First Name: ${this.state.currentContact.firstName}`}</p>\n\t\t\t\t\t\t\t<p>{`Last Name: ${this.state.currentContact.lastName}`}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t:\n\t\t\t\t\t\tnull\n*/\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t  \t</div>\n\t\t);\n  \t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './addressBook.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}